<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>15balloon.github.io/</title>
   
   <link>https://15balloon.github.io</link>
   <description>Develop and Write</description>
   <language>ko-KR</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Flutter 터치하지 않았는데 onTap 불리는 문제 해결</title>
	  <link>/2024-03-15-Flutter-onTap-Issue</link>
	  <author></author>
	  <pubDate>2024-03-15T21:01:37+09:00</pubDate>
	  <guid>/2024-03-15-Flutter-onTap-Issue</guid>
	  <description><![CDATA[
	     <p>Card 위젯을 사용해 데이터 목록을 표시하는 레이아웃을 만들었다. <br />
그리고 하나의 Card 위젯을 선택할 수 있도록 GestureDetector 위젯을 사용했다. <br />
(이후에 InkWell 위젯도 알게 되었다…!) <br />
onTap callback 함수를 작성하여 Card 위젯이 선택되면 border를 표시하도록 했다.</p>

<h4 id="이상-현상">이상 현상</h4>
<p>레이아웃이 포함된 화면으로 전환될 때 빨간 화면이 떴다. <br />
오류를 보니 (대충) 찬물도 위아래가 있는데 UI가 그려지기도 전에 UI를 변경하자고 우기면 어떡하냐는 내용이었다. <br />
로그를 찍어 봤는데 단지 화면이 전환되었을 뿐인데 onTap이 불렸다. <br />
터치한게 아니고 화면이 표시되었을 뿐인데 onTap이 불린 것이다.</p>

<h4 id="문제-해결">문제 해결</h4>
<p>바로 오류 상황을 구글에 검색해보니 역시나 누군가가 질문한 글이 있었다. <br />
답변은 다음과 같다. <br />
onTap은 GestureTapCallback 함수의 한 종류이기 때문에</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Wrong code</span>
<span class="nl">onTap:</span> <span class="n">somethingFunction</span><span class="o">(),</span>
</code></pre></div></div>
<p>이렇게 사용하면 사용자의 Tap 입력없이 바로 함수가 실행된다. <br />
그러니 다음과 같이 사용해야 한다.</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Correct code</span>
<span class="nl">onTap:</span> <span class="o">()</span> <span class="o">{</span><span class="n">somethingFunction</span><span class="o">()},</span>
</code></pre></div></div>
<p>답변을 보고 코드를 보니 정말 저렇게 잘못 작성했다. <br />
답변대로 작성하여 문제를 해결할 수 있었다.</p>

<p>조금만 생각해보면 onTap은 함수 타입이고 somethingFunction은 void 타입이라 오동작했다는 것을 깨달을 수 있었을 텐데 왜 그 당시에는 그런 생각이 안 떠올랐는지 모르겠다.</p>

<h4 id="conclusion">Conclusion</h4>
<p>프로젝트 마감 기한이 촉박해서 어쩔 수 없이 아무런 지식이 없는 상태로 당장 Flutter 개발을 시작하게 되었다. <br />
지금 글을 작성한 시점 기준 Flutter를 시작한지 2주가 되었다. <br />
그래서 Dart 언어와 Flutter 기초 지식이 너무나도 부족했다. <br />
그나마 레이아웃 구성이 Jetpack Compose와 유사하다는 것이 위안이다.</p>

<p>Java, Kotlin과 Dart가 어떤 부분이 다른지 아예 모르니 코드를 작성하면서 이게 왜 안 되지 하는 순간이 있었다. <br />
Dart에서 람다식은 무조건 한 줄로만 작성해야 한다는 것도 이번에 처음 알게 되었다. <br />
그리고 Dart 언어 특성을 살려서 코드를 작성하는 것 같지 않아서(느낌적인 느낌) 아쉽다. <br />
유지보수하면서 조금씩 고쳐나가야 겠다.</p>

<p>Dart랑 Flutter 공식 문서가 정말 잘 작성되어 있다. <br />
어떤 요소를 사용하고 싶은지만 알아내서 공식 문서만 보고 코드를 짜도 괜찮았다. <br />
아무래도 구글이 출시한 프레임워크라서 그런 것 같다.</p>

<h5 id="reference">Reference:</h5>

<ol>
  <li><a href="https://stackoverflow.com/questions/75600597/why-ontap-function-runs-without-tapping-when-it-have-arguments">Why onTap function runs without tapping when it have arguments?</a></li>
  <li><a href="https://dart-ko.dev/language/functions">Dart - 함수</a></li>
</ol>

	  ]]></description>
	</item>

	<item>
	  <title>Flutter WebView 흰 화면 문제 해결</title>
	  <link>/2024-03-13-Flutter-WebView-Issue</link>
	  <author></author>
	  <pubDate>2024-03-13T23:14:13+09:00</pubDate>
	  <guid>/2024-03-13-Flutter-WebView-Issue</guid>
	  <description><![CDATA[
	     <p>회사에서 새로운 프로젝트를 진행하게 되었다. <br />
일단은 안드로이드 앱을 먼저 출시하겠지만 추후 iOS 앱도 출시해야 하기 때문에 Flutter로 개발하기로 했다. <br />
이 프로젝트는 PG사 결제 연동도 구현해야 하는데, 결제 기능이 WebView를 통해 이루어지고 있어서 <strong>webview_flutter</strong> 라이브러리를 사용해서 개발을 하였다.</p>

<h4 id="이상-현상">이상 현상</h4>
<p>결제 모듈을 앱에 붙여서 테스트를 진행하였는데, 다른 앱으로 전환했다가 다시 앱에 진입하면 <strong>WebView가 흰 화면으로 보여지는 문제</strong>가 발생했다. <br />
로그를 찍어 살펴보니 다시 앱에 진입할 때 WebView가 두 번씩 reload 되고 있는데 이게 문제인건지 알 수가 없었다. <br />
그래서 구글 검색을 해보니 Flutter Github의 Issue 탭에 올라온 글을 발견할 수 있었다.</p>

<h4 id="문제-해결">문제 해결</h4>
<p>webview_flutter 라이브러리 사용 시 Android 14 버전을 가진 삼성 기기에서 흰 화면이 표시되는 문제가 있다는 것을 어떤 사람이 리포트한 것이다. <br />
갤럭시 S23에 Android 14가 정식 배포된게 11월인데 글이 11월 말에 올라왔으니 거의 바로 리포트된 셈이다. <br />
글을 쭉 읽으면 삼성에도 이 문제를 알렸지만 아직까지도 별다른 대응은 없는 것을 확인할 수 있다. <br />
<em>mxnortal</em>이라는 유저가 임시 해결 방안을 올려놓았는데, 이를 적용하여 문제를 해결할 수 있었다. <br />
코드를 살펴보면 다음과 같다.</p>
<div class="language-dart highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@override</span>    
<span class="kt">void</span> <span class="nf">didChangeAppLifecycleState</span><span class="p">(</span><span class="n">AppLifecycleState</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">AppLifecycleState</span><span class="o">.</span><span class="na">resumed</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">_shouldReloadWebView</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="n">Future</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">&gt;</span> <span class="n">_shouldReloadWebView</span><span class="o">()</span> <span class="n">async</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">Platform</span><span class="o">.</span><span class="na">isAndroid</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="kd">var</span> <span class="n">androidInfo</span> <span class="o">=</span> <span class="n">await</span> <span class="n">DeviceInfoPlugin</span><span class="o">().</span><span class="na">androidInfo</span><span class="o">;</span>
            <span class="kd">var</span> <span class="n">sdkInt</span> <span class="o">=</span> <span class="n">androidInfo</span><span class="o">.</span><span class="na">version</span><span class="o">.</span><span class="na">sdkInt</span><span class="o">;</span>
            <span class="kd">var</span> <span class="n">manufacturer</span> <span class="o">=</span> <span class="n">androidInfo</span><span class="o">.</span><span class="na">manufacturer</span><span class="o">;</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">sdkInt</span> <span class="o">==</span> <span class="mi">34</span> <span class="o">&amp;&amp;</span> <span class="n">manufacturer</span> <span class="o">==</span> <span class="s">'samsung'</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">setState</span><span class="o">(()</span> <span class="o">{</span>
                    <span class="n">_isInProgress</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                <span class="o">});</span>

                <span class="n">Future</span><span class="o">.</span><span class="na">delayed</span><span class="o">(</span><span class="kd">const</span> <span class="n">Duration</span><span class="o">(</span><span class="nl">milliseconds:</span> <span class="mi">300</span><span class="o">),</span> <span class="o">()</span> <span class="o">{</span>
                    <span class="n">setState</span><span class="o">(()</span> <span class="o">{</span>
                        <span class="n">_isInProgress</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                    <span class="o">});</span>
                <span class="o">});</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">_</span><span class="o">)</span> <span class="o">{}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@override</span>
  <span class="n">Widget</span> <span class="n">build</span><span class="o">(</span><span class="n">BuildContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">=&gt;</span> <span class="n">_isInProgress</span>
      <span class="o">?</span> <span class="kd">const</span> <span class="n">SizedBox</span><span class="o">.</span><span class="na">shrink</span><span class="o">()</span>
      <span class="o">:</span> <span class="n">WebViewWidget</span><span class="o">();</span>
</code></pre></div></div>
<p>onResume 상태가 된 경우, 사용하는 기기가 삼성 기기이면서 Android 14 버전이면 빈 widget을 그렸다가 WebView를 그린다. <br />
이렇게 코드를 수정하면 다른 앱으로 전환 후에 다시 돌아와도 WebView가 잘 보이는 것을 확인할 수 있다.</p>

<h4 id="conclusion">Conclusion</h4>
<p>삼성 기기만의 문제일 것이라고는 생각도 못해서 빠르게 해결하지는 못했다. <br />
Flutter도 처음이었고, 결제 모듈 연동도 처음이어서 코드에 문제가 있지 않을까 라는 생각이 먼저 들었기 때문이다. <br />
다행히 Issue에 리포트된 사항이었고, 임시 해결 방안까지 있어서 해결할 수 있었다. <br />
물론 이후에 POST 방식으로 데이터를 전송함과 동시에 페이지를 여는 기능이 필요해져서 <strong>flutter_inappwebview</strong> 라이브러리를 사용하게 되어 이 해결 방안을 사용하게 되진 않았지만 말이다.</p>

<h5 id="reference">Reference:</h5>

<ol>
  <li><a href="https://github.com/flutter/flutter/issues/139039">Samsung phones running Android 14 stops drawing platform views on resume</a></li>
</ol>

	  ]]></description>
	</item>

	<item>
	  <title>View Binding Migration 문제 해결</title>
	  <link>/2024-01-30-ViewBinding-Migration-Issue</link>
	  <author></author>
	  <pubDate>2024-01-30T23:19:59+09:00</pubDate>
	  <guid>/2024-01-30-ViewBinding-Migration-Issue</guid>
	  <description><![CDATA[
	     <p>회사에 대략 6년 정도 된 앱이 하나 있는데, 그 앱을 담당했던 분이 퇴사하면서 내가 그 앱의 담당자가 되었다. <br />
전 담당자분은 앱 개발자는 아니었지만, 개발하셨던 것 같다. <br />
(타 부서라 잘 몰랐고, 그래서 이런 앱이 있는지도 몰랐다) <br />
아무튼 오래된 앱이고 개발자의 전문 분야가 앱이 아니다 보니 전체적으로 기술이 낡아 있었다. <br />
앱 전체가 Java로 되어 있었고, View Binding이나 Retrofit2도 사용하지 않았다. <br />
이 앱 담당자가 되었을 때부터 기술을 조금이라도 최신화하고 싶었지만, 진행하는 주 프로젝트가 있었고 이건 서브였기 때문에 언젠가 틈이 나기만을 기다렸다. <br />
그러다 이번에 시간이 조금 나서 일부 코드를 Kotlin으로의 Migration과 View Binding을 사용하도록 수정하는 작업을 진행하였다.</p>

<h4 id="이상-현상">이상 현상</h4>
<p>먼저 Activity와 같은 주요 클래스들을 먼저 수정하였는데, 이 과정에서 문제가 발생했다. <br />
setContentView() 수행 시 R.layout.activity_xxx 대신 View Binding을 사용하도록 변경하였는데 View가 다르게 보였다. <br />
<img src="/assets/images/2024-01-30-ViewBinding-Migration-Issue_1.jpg" width="100%" height="100%" title="normal view" alt="Image: Original View" />
이렇게 보여야 하는 View인데,
<img src="/assets/images/2024-01-30-ViewBinding-Migration-Issue_2.jpg" width="40%" height="40%" title="problem view" alt="Image: Problem View" />
이렇게 보였다.</p>

<h4 id="코드-구조">코드 구조</h4>
<p>해당 View의 간략한 구조는 다음과 같다.</p>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;LinearLayout</span>
    <span class="na">android:layout_width=</span><span class="s">"100dp"</span>
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;TextView</span>
        <span class="na">android:layout_width=</span><span class="s">"wrap_content"</span>
        <span class="na">android:layout_height=</span><span class="s">"40dp"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/LinearLayout&gt;</span>
</code></pre></div></div>

<p>최상단에 LinearLayout이 있고 width가 100dp로 고정되어 있다. <br />
그리고 그 하위에 TextView가 있고 width는 wrap_content로 설정되어 있다.</p>

<p>다른 View들은 괜찮았는데 딱 그 View만 문제였다. <br />
다른 View와 차이가 뭔지 살펴보니 이 View는 Manifest에 theme가 Dialog로 설정되어 있었다.</p>

<h4 id="문제-해결">문제 해결</h4>
<p>Dialog Theme는 해당 View에 포함된 실제 View의 크기에 따라 공간을 차지하게 되어 있다. <br />
그렇다 하더라도 LinearLayout의 width가 고정값이기 때문에 해당 크기에 맞춰 공간을 차지해야 하는데 이 값이 무시되었다. <br />
처음엔 View Binding에 문제가 있다고 판단하였는데, 그것이 아니고 overloading된 setContentView() 메소드에 차이가 있었다. <br />
setContentView(@LayoutRes int)를 수행할 때는 기존에 설정된 레이아웃 매개변수를 그대로 사용하지만, setContentView(View)를 수행할 때는 레이아웃 매개변수가 무시되고 width와 height가 match_parent로 설정된다. <br />
(width와 height가 match_parent로 설정된 건 Layout Inspector Tool로 확인할 수 있다) <br />
<img src="/assets/images/2024-01-30-ViewBinding-Migration-Issue_3.jpg" width="100%" height="100%" title="setContentView" alt="Image: setContentView" />
이 설명은 Activity.class 파일에서 확인할 수 있다.</p>

<p>따라서 아래와 같이 inflater를 사용하여 view 객체를 생성한 경우 setContentView(View) 메소드를 사용하므로 LinearLayout의 width 값이 match_parent로 바뀌어서 View가 다르게 보이게 된다.</p>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">inflater</span> <span class="p">=</span> <span class="nf">getSystemService</span><span class="p">(</span><span class="nc">Context</span><span class="p">.</span><span class="nc">LAYOUT_INFLATER_SERVICE</span><span class="p">)</span> <span class="k">as</span> <span class="nc">LayoutInflater</span>
<span class="kd">val</span> <span class="py">view</span> <span class="p">=</span> <span class="n">inflater</span><span class="p">.</span><span class="nf">inflate</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_xxx</span><span class="p">,</span> <span class="k">null</span><span class="p">)</span> <span class="k">as</span> <span class="nc">View</span>
<span class="nf">setContentView</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="해결-방법">해결 방법</h4>
<p>이를 해결하기 위해서는 Activity.class 파일에 쓰여 있는 설명대로 setContentView(View, ViewGroup.LayoutParams) 메소드를 사용하면 된다.</p>

<h4 id="conclusion">Conclusion</h4>
<p>Migration 과정에서 발생한 문제를 해결하며 findViewById와 View Binding의 동작 원리에 대해서 다시 한번 살펴보게 되었고, setContentView() 메소드 종류가 다양하다는 것과 동작에 차이가 있다는 것을 알게 되었다.</p>

<h5 id="reference">Reference:</h5>

<ol>
  <li><a href="https://stackoverflow.com/questions/61695769/why-using-view-binding-is-changing-the-layout">Why using View Binding is changing the layout?</a></li>
</ol>

	  ]]></description>
	</item>

	<item>
	  <title>안드로이드 텍스트뷰 Width 이상 현상</title>
	  <link>/2023-01-08-Strange-Android-Textview-width</link>
	  <author></author>
	  <pubDate>2023-01-08T22:52:55+09:00</pubDate>
	  <guid>/2023-01-08-Strange-Android-Textview-width</guid>
	  <description><![CDATA[
	     <h4 id="android-textview-width-이상-현상-수정">Android Textview width 이상 현상 수정</h4>

<p>안드로이드 앱 개발을 하던 중 폰트를 수정하면서 Textview의 width가 이상한 문제를 발견했다.<br />
<img src="/assets/images/2023-01-08-Strange-Android-Textview-width_1.jpg" width="100%" height="100%" title="problem" alt="Image: Strange Textviews" />
위 사진에서 볼 수 있듯 같은 문장인데 Textview들의 길이가 차이 났다. (위 사진은 그때의 상황을 재현한 것임)<br />
둘 다 코드에서 자간이나 폰트 크기 등을 설정해주긴 하지만 모두 동일하게 설정해주고 있었고, 다르게 적용하는 부분은 없었다.<br />
그나마 차이라 한다면 하나는 Scrollview를 사용하고, 하나는 Textview를 사용한다는 것이다.<br />
혹시 이 둘의 차이가 있는 건지 검색해보았지만, 당연히 관련된 내용은 찾을 수 없었다.<br />
차이가 나는 Textview들을 뚫어지게 살펴보니 View 전체가 아니라 자간에서만 차이를 보이는 것을 발견했다.<br />
그렇지만 코드에서 자간은 모두 동일하게 설정해주고 있었기 때문에 더욱 의문에 빠질 수밖에 없었다.<br />
게다가 시스템 기본 폰트를 사용할 때는 보이지 않았다가, 새로운 폰트를 적용하니 문제가 보여서 더 혼란스러웠다.<br />
몇 시간을 구글에서 헤매던 중에 하나의 Textview는 코드 내에서 글자를 조합해서 보여주는 방식이고, 다른 하나의 Textview는 웹페이지에서 입력한 값을 서버를 통해 받아와서 보여주는 방식임을 보고 두 문자열을 로그에 찍어 보았다.<br />
당연히 로그 상에서는 ‘It has strange width…‘로 동일하게 보였다.<br />
뭐가 문제일까 생각하다 코드 내에서 다시 로그를 찍어 봐야겠다 하고 아무 생각 없이 로그에 찍힌 두 번째 Textview의 문자열을 복사해서 아래와 같이 붙여 넣었다.<br />
그랬더니 아래와 같은 광경이 내 눈앞에 펼쳐졌다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Log</span><span class="p">.</span><span class="nf">d</span><span class="p">(</span><span class="nc">TAG</span><span class="p">,</span> <span class="s">"It has strange width..."</span><span class="p">)</span> <span class="c1">// What I expected...</span>
<span class="nc">Log</span><span class="p">.</span><span class="nf">d</span><span class="p">(</span><span class="nc">TAG</span><span class="p">,</span> <span class="s">"It[NBSP]has[NBSP]strange[NBSP]width..."</span><span class="p">)</span> <span class="c1">// But the following happened...!</span>
</code></pre></div></div>

<p>여기서 [NBSP]는 HTML에서 볼 수 있는 &amp;nbsp가 맞다.<br />
No-Break Space의 줄임말이며, 줄바꿈 없는 공백이란 뜻이다.<br />
NBSP의 유니코드는 ‘\u00A0’이다.<br />
그런데 일반 공백, 우리가 흔히 스페이스 바로 작성하는 공백의 유니코드는 ‘\u0020’이다.<br />
즉, 두 글자는 같아 보이지만 전혀 다른 글자이다.<br />
기본 폰트는 ‘\u0020’이든 ‘\u00A0’이든 거의 비슷한 너비를 가져서 두 Textview들의 길이 차이가 거의 없었지만, 일부 폰트들은 일반 공백인 ‘\u0020’의 너비만 폰트 컨셉에 맞게 지정해 놓았는데 ‘\u00A0’의 너비는 별도로 지정해 놓지 않아서 기본 너비만큼만 작성되었기 때문에 차이가 났던 것이라고 결론 내렸다.<br />
그리고 Textview에 넣을 문자열의 ‘\u00A0’을 모두 ‘\u0020’으로 replace하여 사용하도록 수정하여 문제를 해결하였다.</p>

<h5 id="reference">Reference:</h5>

<p>Just me</p>

	  ]]></description>
	</item>

	<item>
	  <title>Giuhub Pages 404 error</title>
	  <link>/2022-12-29-Giuhub-Pages-404-error</link>
	  <author></author>
	  <pubDate>2022-12-29T23:20:57+09:00</pubDate>
	  <guid>/2022-12-29-Giuhub-Pages-404-error</guid>
	  <description><![CDATA[
	     <h4 id="jekyll-테마-적용-중에-발생한-오류-수정">Jekyll 테마 적용 중에 발생한 오류 수정</h4>

<p>모든 파일을 Git에 제대로 올렸음에도 페이지 메뉴에서 태그별 게시물 보기를 눌렀을 때 404 페이지가 뜨는 문제가 발생했다.<br />
<img src="/assets/images/2022-12-29-Github-Page-404-error_1.jpg" width="100%" height="100%" title="problem" alt="Image: 404 Page" />
뭐가 문제인지 알 수 없어서 적용한 테마의 Github에 들어가서 거기에 올라온 코드와 내가 올린 코드를 비교했다.<br />
그중 link 태그의 href가 아래와 같이 나오고 있다는 사실을 알게 되어 이 부분을 수정하여 다시 올렸다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;link rel="canonical" href="//asset/..."&gt;
</code></pre></div></div>

<p>수정하여 올렸음에도 불구하고 404 페이지가 뜨는 건 똑같았다.<br />
검색을 통해 link 태그는 주로 .css 같은 스타일시트 파일을 연결하거나 웹 폰트를 적용할 때 사용하는 태그라는 걸 알게 되었다.<br />
위와 같이 URL이 작성되어도 페이지를 불러오는 데에는 문제는 없다는 것이다.</p>

<p>다시 적용한 테마의 Github에 들어가서 코드를 비교했지만, 다른 점은 하나도 없었다.<br />
그리고 그제야 구글에 ‘Github Page 404’라고 검색해봤다.<br />
메인으로 나온 글을 선택해서 답변을 보았는데, 추천 수가 높은 답변은 내 상황과는 다른 답변이었다.<br />
답변이 무려 42개나 달린 글이어서 아래로 내리면서 내 상황과 맞는 답변이 있는지 보았다.<br />
보통 Jekyll을 사용하지 않은 경우 특정 파일을 올리라든지, 다른 branch에 commit을 하라든지 하는 답변들이었다.<br />
그러다 추천 수가 4개인 답변이 눈에 띄었다.<br />
Jöcker라는 사용자가 달아 놓은 답변인데 보는 순간 알았다.<br />
이게 내 문제를 해결해줄 거라는 것을.<br />
해결책은 간단했다.<br />
Github Page를 올린 repository에 들어가 Settings를 누르고 Pages 탭을 선택해서 Github Pages를 보여줄 branch를 선택하는 것이었다.<br />
<img src="/assets/images/2022-12-29-Github-Page-404-error_2.jpg" width="100%" height="100%" title="solution" alt="Image: Change repository Settings Branch" />
설정을 바꾸자마자 문제는 해결이 되었다.</p>

<h5 id="reference">Reference:</h5>

<p><a href="https://stackoverflow.com/questions/11577147/how-to-fix-http-404-on-github-pages">https://stackoverflow.com/questions/11577147/how-to-fix-http-404-on-github-pages</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>Jekyll baseurl error</title>
	  <link>/2022-12-25-Jekyll-baseurl-error</link>
	  <author></author>
	  <pubDate>2022-12-25T04:20:29+09:00</pubDate>
	  <guid>/2022-12-25-Jekyll-baseurl-error</guid>
	  <description><![CDATA[
	     <h4 id="jekyll-테마-적용-중-발생한-오류-수정">Jekyll 테마 적용 중 발생한 오류 수정</h4>

<p>Jekyll 테마를 적용하는 중에 baseurl이 적용되지 않는 문제가 발생했다.<br />
_config.yml 안에서 baseurl을 ‘/’으로 작성하였음에도 불구하고, baseurl이 계속 empty로 나타나는 문제였다.<br />
그것도 로컬에서 확인할 때는 문제가 없다가 Git에 올려서 Github Page를 확인했을 때 문제가 발견되었다.<br />
baseurl을 ‘//’이나 ‘\/’로 바꾸었을 때는 동일한 문자열을 가져와서 작동하는걸 보니 코드의 문제는 아닌듯 했다.<br />
실제 페이지는 Github Action을 통해 ‘main’ Branch에 올라온 코드를 토대로 정적 페이지를 생성하여 ‘gh-pages’ Branch에 올린다.<br />
이 과정을 통해 Github Page를 볼 수 있게 된다.<br />
이를 보아 Github Action에서 페이지 Build와 Deploy를 하는 과정에서 ‘/’처럼 하나의 슬래시만 가지고 있는 baseurl을 빈 칸으로 만들고 있음을 추측할 수 있었다.<br />
관련 내용을 찾아보려 Jekyll 공식 홈페이지를 살펴보았으나 유의미한 내용은 찾지 못했다.<br />
Github의 Issue를 살펴보니 다음과 같은 내용이 적혀있었다.</p>

<blockquote>
  <p>See http://ben.balter.com/jekyll-style-guide/config/#baseurl (and the linked post) for more information on s. The baseurl should never be. baseurl: /<br />
baseurl을 ‘/’으로 작성하면 안 된다. (링크된 포스트 내용) ‘/example’과 같은 하위 경로가 있는 경우에만 baseurl을 작성해야 하고, 하위 경로가 없다면 아무것도 작성하지 않는다.</p>
</blockquote>

<p>이에 따라 코드 내에서 baseurl을 사용하는 모든 곳에 ‘/’를 추가 작성하여 해결하였다.</p>

<h5 id="reference">Reference:</h5>

<p><a href="https://github.com/github/pages-gem/issues/350">https://github.com/github/pages-gem/issues/350</a></p>

	  ]]></description>
	</item>


</channel>
</rss>
